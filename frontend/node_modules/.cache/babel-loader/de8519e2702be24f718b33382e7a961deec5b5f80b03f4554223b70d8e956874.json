{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport authWrapper from \"../../components/auth-wrapper.vue\";\nimport apiService from \"../../services/api.services\";\nexport default {\n  name: \"register\",\n  components: {\n    \"auth-wrapper\": authWrapper\n  },\n  methods: {\n    login() {\n      this.$router.push(\"/auth/login\");\n    },\n    validateFullName() {\n      //regex to validate full name\n      let re = /^[a-zA-Z0-9-_'. ]+$/;\n      if (!re.test(this.formdata.full_name.value.trim())) {\n        this.formdata.full_name.showError = true;\n        this.formdata.full_name.errorMessage = \"Enter Valid Full name\";\n        return false;\n      } else {\n        this.formdata.full_name.showError = false;\n        this.formdata.full_name.errorMessage = \"\";\n        return true;\n      }\n    },\n    validatePhoneNumber() {\n      //regex to validate phone number\n      let re = /^\\+?([0-9]{2})\\)?[-. ]?([0-9]{4})[-. ]?([0-9]{4})$/;\n      if (!re.test(this.formdata.phone_number.value)) {\n        this.formdata.phone_number.showError = true;\n        this.formdata.phone_number.errorMessage = \"Enter Valid Phone Number\";\n        return false;\n      } else {\n        this.formdata.phone_number.showError = false;\n        this.formdata.phone_number.errorMessage = \"\";\n        return true;\n      }\n    },\n    validateEmailAddress() {\n      //regex to validate email address\n      let re = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n      if (!re.test(this.formdata.email_address.value)) {\n        this.formdata.email_address.showError = true;\n        this.formdata.email_address.errorMessage = \"Enter valid Email Address\";\n        return false;\n      } else {\n        this.formdata.email_address.showError = false;\n        this.formdata.email_address.errorMessage = \"\";\n        return true;\n      }\n    },\n    validatePassword() {\n      //regex passowrd check also check if password confirm password matches if confirm password present\n      let re = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n      if (this.formdata.confirm_password.value) {\n        if (!(this.formdata.confirm_password.value == this.formdata.password.value)) {\n          this.formdata.confirm_password.showError = true;\n          this.formdata.confirm_password.errorMessage = \"Password does not match\";\n        } else {\n          this.formdata.confirm_password.showError = false;\n          this.formdata.confirm_password.errorMessage = \"\";\n        }\n      }\n      if (!re.test(this.formdata.password.value)) {\n        this.formdata.password.showError = true;\n        this.formdata.password.errorMessage = \"Password must be at least 8 characters and contain at least 1 letter, 1 number and 1 special character.\";\n        return false;\n      } else {\n        this.formdata.password.showError = false;\n        this.formdata.password.errorMessage = \"\";\n        return true;\n      }\n    },\n    validateConfirmPassword() {\n      //check if password confirm password matches\n      if (!(this.formdata.confirm_password.value == this.formdata.password.value)) {\n        this.formdata.confirm_password.showError = true;\n        this.formdata.confirm_password.errorMessage = \"Password does not match\";\n        return false;\n      } else {\n        this.formdata.confirm_password.showError = false;\n        this.formdata.confirm_password.errorMessage = \"\";\n        return true;\n      }\n    },\n    registerClick() {\n      this.isloading = true;\n      let validform = true,\n        isValid;\n      //validate all the form data validate methods\n      for (let key in this.formdata) {\n        isValid = this.formdata[key].validate();\n        validform = validform && isValid;\n      }\n      const data = {\n        fullName: this.formdata.full_name.value,\n        phoneNumber: this.formdata.phone_number.value,\n        countryCode: 91,\n        emailAddress: this.formdata.email_address.value,\n        password: this.formdata.password.value\n      };\n      //if all validated then call the register to register user\n      if (validform) {\n        apiService.register(data).then(() => {\n          this.isloading = false;\n          this.$router.push(\"/chat\");\n        }).catch(error => {\n          this.isloading = false;\n          this.showError = true;\n          this.errorMessage = error.response.data.message;\n        });\n      }\n      this.isloading = false;\n    }\n  },\n  data() {\n    return {\n      formdata: {\n        full_name: {\n          value: \"\",\n          showError: false,\n          errorMessage: \"\",\n          validate: this.validateFullName\n        },\n        phone_number: {\n          value: \"\",\n          showError: false,\n          errorMessage: \"\",\n          validate: this.validatePhoneNumber\n        },\n        email_address: {\n          value: \"\",\n          showError: false,\n          errorMessage: \"\",\n          validate: this.validateEmailAddress\n        },\n        password: {\n          value: \"\",\n          showError: false,\n          errorMessage: \"\",\n          validate: this.validatePassword\n        },\n        confirm_password: {\n          value: \"\",\n          showError: false,\n          errorMessage: \"\",\n          validate: this.validateConfirmPassword\n        }\n      },\n      showError: false,\n      errorMessage: \"\",\n      isloading: false\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["authWrapper","apiService","name","components","methods","login","$router","push","validateFullName","re","test","formdata","full_name","value","trim","showError","errorMessage","validatePhoneNumber","phone_number","validateEmailAddress","email_address","validatePassword","confirm_password","password","validateConfirmPassword","registerClick","isloading","validform","isValid","key","validate","data","fullName","phoneNumber","countryCode","emailAddress","register","then","catch","error","response","message"],"sourceRoot":"","sources":["/Users/swapneshnaik/Documents/URLshortenermain/src/pages/auth/register.vue"],"sourcesContent":["<template>\n    <div v-if=\"isloading\" class=\"loading-image\">\n       <img src=\"../../assets/loading.gif\"/>\n    </div>\n    <div class=\"container\" v-else>\n      <auth-wrapper>\n        <div class=\"upper\">\n          <div class=\"text-slogen\">Sign up to simplify your links</div>\n  \n          <div class=\"full-name\">\n            <input\n              type=\"text\"\n              placeholder=\"Full Name\"\n              class=\"register-input-field\"\n              v-model=\"formdata.full_name.value\"\n              @input=\"validateFullName\"\n              @keyup.enter=\"registerClick\"\n            />\n            <p class=\"error-text\" v-if=\"formdata.full_name.showError\">\n              {{ formdata.full_name.errorMessage }}\n            </p>\n          </div>\n  \n          <div class=\"phone-number\">\n            <input\n              type=\"text\"\n              placeholder=\"Phone number\"\n              class=\"register-input-field\"\n              v-model=\"formdata.phone_number.value\"\n              @input=\"validatePhoneNumber\"\n              @keyup.enter=\"registerClick\"\n            />\n            <p class=\"error-text\" v-if=\"formdata.phone_number.showError\">\n              {{ formdata.phone_number.errorMessage }}\n            </p>\n          </div>\n  \n          <div class=\"email-address\">\n            <input\n              type=\"text\"\n              placeholder=\"Email address\"\n              class=\"register-input-field\"\n              v-model=\"formdata.email_address.value\"\n              @input=\"validateEmailAddress\"\n              @keyup.enter=\"registerClick\"\n            />\n            <p class=\"error-text\" v-if=\"formdata.email_address.showError\">\n              {{ formdata.email_address.errorMessage }}\n            </p>\n          </div>\n  \n          <div class=\"password\">\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              class=\"register-input-field\"\n              v-model=\"formdata.password.value\"\n              @input=\"validatePassword\"\n              @keyup.enter=\"registerClick\"\n            />\n            <p class=\"error-text\" v-if=\"formdata.password.showError\">\n              {{ formdata.password.errorMessage }}\n            </p>\n          </div>\n  \n          <div class=\"confirm-password\">\n            <input\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              class=\"register-input-field\"\n              v-model=\"formdata.confirm_password.value\"\n              @input=\"validateConfirmPassword\"\n              @keyup.enter=\"registerClick\"\n            />\n            <p class=\"error-text\" v-if=\"formdata.confirm_password.showError\">\n              {{ formdata.confirm_password.errorMessage }}\n            </p>\n          </div>\n          <p class=\"error-text\" v-if=\"showError\">\n            {{ errorMessage }}\n          </p>\n  \n          <div class=\"policy\">\n            By signing up, you agree to our Terms, Privacy Policy and Cookies\n            Policy.\n          </div>\n  \n          <div class=\"register-button\" v-on:click=\"registerClick\">Sign up</div>\n        </div>\n      </auth-wrapper>\n  \n    </div>\n  </template>\n  \n  <script>\n  import authWrapper from \"../../components/auth-wrapper.vue\";\n  import apiService from \"../../services/api.services\";\n  export default {\n    name: \"register\",\n    components: {\n      \"auth-wrapper\": authWrapper,\n    },\n    methods: {\n      login() {\n        this.$router.push(\"/auth/login\");\n      },\n  \n      validateFullName() {\n        //regex to validate full name\n        let re = /^[a-zA-Z0-9-_'. ]+$/;\n        if (!re.test(this.formdata.full_name.value.trim())) {\n          this.formdata.full_name.showError = true;\n          this.formdata.full_name.errorMessage = \"Enter Valid Full name\";\n          return false;\n        } else {\n          this.formdata.full_name.showError = false;\n          this.formdata.full_name.errorMessage = \"\";\n          return true;\n        }\n      },\n      validatePhoneNumber() {\n        //regex to validate phone number\n        let re = /^\\+?([0-9]{2})\\)?[-. ]?([0-9]{4})[-. ]?([0-9]{4})$/;\n        if (!re.test(this.formdata.phone_number.value)) {\n          this.formdata.phone_number.showError = true;\n          this.formdata.phone_number.errorMessage = \"Enter Valid Phone Number\";\n          return false;\n        } else {\n          this.formdata.phone_number.showError = false;\n          this.formdata.phone_number.errorMessage = \"\";\n          return true;\n        }\n      },\n      validateEmailAddress() {\n        //regex to validate email address\n        let re = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n        if (!re.test(this.formdata.email_address.value)) {\n          this.formdata.email_address.showError = true;\n          this.formdata.email_address.errorMessage = \"Enter valid Email Address\";\n          return false;\n        } else {\n          this.formdata.email_address.showError = false;\n          this.formdata.email_address.errorMessage = \"\";\n          return true;\n        }\n      },\n      validatePassword() {\n      //regex passowrd check also check if password confirm password matches if confirm password present\n        let re = /^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/;\n        if (this.formdata.confirm_password.value) {\n          if (\n            !(\n              this.formdata.confirm_password.value == this.formdata.password.value\n            )\n          ) {\n            this.formdata.confirm_password.showError = true;\n            this.formdata.confirm_password.errorMessage =\n              \"Password does not match\";\n          }\n          else{\n            this.formdata.confirm_password.showError = false;\n            this.formdata.confirm_password.errorMessage =\"\";\n            \n          }\n        }\n        if (!re.test(this.formdata.password.value)) {\n          this.formdata.password.showError = true;\n          this.formdata.password.errorMessage =\n            \"Password must be at least 8 characters and contain at least 1 letter, 1 number and 1 special character.\";\n          return false;\n        } else {\n          this.formdata.password.showError = false;\n          this.formdata.password.errorMessage = \"\";\n          return true;\n        }\n      },\n      validateConfirmPassword() {\n        //check if password confirm password matches\n        if (\n          !(this.formdata.confirm_password.value == this.formdata.password.value)\n        ) {\n          this.formdata.confirm_password.showError = true;\n          this.formdata.confirm_password.errorMessage = \"Password does not match\";\n          return false;\n        } else {\n          this.formdata.confirm_password.showError = false;\n          this.formdata.confirm_password.errorMessage = \"\";\n          return true;\n        }\n      },\n  \n      registerClick() {\n        this.isloading=true;\n        let validform = true,\n          isValid;\n        //validate all the form data validate methods\n        for (let key in this.formdata) {\n          isValid = this.formdata[key].validate();\n          validform = validform && isValid;\n        }\n  \n        const data = {\n          fullName: this.formdata.full_name.value,\n          phoneNumber: this.formdata.phone_number.value,\n          countryCode: 91,\n          emailAddress: this.formdata.email_address.value,\n          password: this.formdata.password.value,\n        };\n        //if all validated then call the register to register user\n        if (validform) {\n          apiService\n            .register(data)\n            .then(() => {\n              this.isloading=false\n              this.$router.push(\"/chat\");\n            })\n            .catch((error) => {\n              this.isloading=false\n              this.showError = true;\n              this.errorMessage = error.response.data.message;\n            });\n        }\n        this.isloading=false;\n      },\n    },\n  \n    data() {\n      return {\n        formdata: {\n          full_name: {\n            value: \"\",\n            showError: false,\n            errorMessage: \"\",\n            validate: this.validateFullName,\n          },\n  \n          phone_number: {\n            value: \"\",\n            showError: false,\n            errorMessage: \"\",\n            validate: this.validatePhoneNumber,\n          },\n  \n          email_address: {\n            value: \"\",\n            showError: false,\n            errorMessage: \"\",\n            validate: this.validateEmailAddress,\n          },\n  \n          password: {\n            value: \"\",\n            showError: false,\n            errorMessage: \"\",\n            validate: this.validatePassword,\n          },\n  \n          confirm_password: {\n            value: \"\",\n            showError: false,\n            errorMessage: \"\",\n            validate: this.validateConfirmPassword,\n          },\n        },\n        showError: false,\n        errorMessage: \"\",\n        isloading:false\n      };\n    },\n  };\n  </script>\n  \n  <style lang=\"scss\" scoped>\n  .container {\n    width: 350px;\n    border: 2px black;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n  \n  .upper-part {\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  }\n  \n  .upper {\n    margin-left: 30px;\n    margin-right: 30px;\n  }\n  \n  .lower-part {\n    margin-top: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-top: 20px;\n    height: 100px;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  }\n  \n  .register-input-field {\n    width: 100%;\n    margin-top: 5px;\n    padding: 9px 0 7px 8px;\n    background: rgb(250, 250, 250);\n    border: 1px solid lightgrey;\n    outline: none;\n  }\n  \n  .text-slogen {\n    font-size: 16px;\n    margin-bottom: 10px;\n  }\n  \n  .register-button {\n    border-radius: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    height: 30px;\n    margin-top: 15px;\n    background-color: rgb(63, 165, 63);\n    cursor: pointer;\n  }\n  \n  .partition-or {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 15px;\n    font-size: 12px;\n    margin-bottom: 10px;\n  }\n  \n  .policy {\n    margin-left: 10px;\n    margin-top: 10px;\n    font-size: 12px;\n  }\n  \n  .log-in {\n    padding-left: 5px;\n    color: rgb(57, 98, 221);\n    cursor: pointer;\n  }\n  \n  .error-text {\n    color: red;\n    font-size: 11px;\n    margin-top: 3px;\n    margin-bottom: 2px;\n    text-align: left;\n  }\n  \n  .loading-image{\n    height:100px;\n    position:absolute;\n    top:50%;\n    left:50%;\n    transform: translate(-50%,-50%);\n  \n    img{\n      height:100%;\n  \n    }\n  }\n  </style>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}